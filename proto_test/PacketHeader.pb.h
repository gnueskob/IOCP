// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PacketHeader.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_PacketHeader_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_PacketHeader_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_PacketHeader_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_PacketHeader_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_PacketHeader_2eproto;
namespace lsbProto {
class PacketHeader;
class PacketHeaderDefaultTypeInternal;
extern PacketHeaderDefaultTypeInternal _PacketHeader_default_instance_;
}  // namespace lsbProto
PROTOBUF_NAMESPACE_OPEN
template<> ::lsbProto::PacketHeader* Arena::CreateMaybeMessage<::lsbProto::PacketHeader>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace lsbProto {

enum PacketHeader_PacketId : int {
  PacketHeader_PacketId_UNDEFINED = 0,
  PacketHeader_PacketId_NTF_SYS_CONNECT_SESSION = 10,
  PacketHeader_PacketId_NTF_SYS_CLOSE_SESSION = 11,
  PacketHeader_PacketId_LOGIN_REQ = 21,
  PacketHeader_PacketId_LOGIN_RES = 22,
  PacketHeader_PacketId_LOGOUT_REQ = 26,
  PacketHeader_PacketId_LOGOUT_RES = 27,
  PacketHeader_PacketId_ROOM_ENTER_REQ = 31,
  PacketHeader_PacketId_ROOM_ENTER_RES = 32,
  PacketHeader_PacketId_ROOM_ENTER_NEW_USER_NTF = 33,
  PacketHeader_PacketId_ROOM_USER_LIST = 34,
  PacketHeader_PacketId_ROOM_LEAVE_REQ = 36,
  PacketHeader_PacketId_ROOM_LEAVE_RES = 37,
  PacketHeader_PacketId_ROOM_LEAVE_USER_NTF = 38,
  PacketHeader_PacketId_ROOM_CHAT_REQ = 42,
  PacketHeader_PacketId_ROOM_CHAT_RES = 43,
  PacketHeader_PacketId_ROOM_CHAT_NTF = 44,
  PacketHeader_PacketId_ROOM_CHANGED_INFO_NTF = 46,
  PacketHeader_PacketId_DEV_ECHO_REQ = 241,
  PacketHeader_PacketId_DEV_ECHO_RES = 242,
  PacketHeader_PacketId_MAX = 256,
  PacketHeader_PacketId_PacketHeader_PacketId_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  PacketHeader_PacketId_PacketHeader_PacketId_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool PacketHeader_PacketId_IsValid(int value);
constexpr PacketHeader_PacketId PacketHeader_PacketId_PacketId_MIN = PacketHeader_PacketId_UNDEFINED;
constexpr PacketHeader_PacketId PacketHeader_PacketId_PacketId_MAX = PacketHeader_PacketId_MAX;
constexpr int PacketHeader_PacketId_PacketId_ARRAYSIZE = PacketHeader_PacketId_PacketId_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PacketHeader_PacketId_descriptor();
template<typename T>
inline const std::string& PacketHeader_PacketId_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PacketHeader_PacketId>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PacketHeader_PacketId_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PacketHeader_PacketId_descriptor(), enum_t_value);
}
inline bool PacketHeader_PacketId_Parse(
    const std::string& name, PacketHeader_PacketId* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PacketHeader_PacketId>(
    PacketHeader_PacketId_descriptor(), name, value);
}
// ===================================================================

class PacketHeader :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lsbProto.PacketHeader) */ {
 public:
  PacketHeader();
  virtual ~PacketHeader();

  PacketHeader(const PacketHeader& from);
  PacketHeader(PacketHeader&& from) noexcept
    : PacketHeader() {
    *this = ::std::move(from);
  }

  inline PacketHeader& operator=(const PacketHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline PacketHeader& operator=(PacketHeader&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PacketHeader& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PacketHeader* internal_default_instance() {
    return reinterpret_cast<const PacketHeader*>(
               &_PacketHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PacketHeader& a, PacketHeader& b) {
    a.Swap(&b);
  }
  inline void Swap(PacketHeader* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PacketHeader* New() const final {
    return CreateMaybeMessage<PacketHeader>(nullptr);
  }

  PacketHeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PacketHeader>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PacketHeader& from);
  void MergeFrom(const PacketHeader& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PacketHeader* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lsbProto.PacketHeader";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PacketHeader_2eproto);
    return ::descriptor_table_PacketHeader_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef PacketHeader_PacketId PacketId;
  static constexpr PacketId UNDEFINED =
    PacketHeader_PacketId_UNDEFINED;
  static constexpr PacketId NTF_SYS_CONNECT_SESSION =
    PacketHeader_PacketId_NTF_SYS_CONNECT_SESSION;
  static constexpr PacketId NTF_SYS_CLOSE_SESSION =
    PacketHeader_PacketId_NTF_SYS_CLOSE_SESSION;
  static constexpr PacketId LOGIN_REQ =
    PacketHeader_PacketId_LOGIN_REQ;
  static constexpr PacketId LOGIN_RES =
    PacketHeader_PacketId_LOGIN_RES;
  static constexpr PacketId LOGOUT_REQ =
    PacketHeader_PacketId_LOGOUT_REQ;
  static constexpr PacketId LOGOUT_RES =
    PacketHeader_PacketId_LOGOUT_RES;
  static constexpr PacketId ROOM_ENTER_REQ =
    PacketHeader_PacketId_ROOM_ENTER_REQ;
  static constexpr PacketId ROOM_ENTER_RES =
    PacketHeader_PacketId_ROOM_ENTER_RES;
  static constexpr PacketId ROOM_ENTER_NEW_USER_NTF =
    PacketHeader_PacketId_ROOM_ENTER_NEW_USER_NTF;
  static constexpr PacketId ROOM_USER_LIST =
    PacketHeader_PacketId_ROOM_USER_LIST;
  static constexpr PacketId ROOM_LEAVE_REQ =
    PacketHeader_PacketId_ROOM_LEAVE_REQ;
  static constexpr PacketId ROOM_LEAVE_RES =
    PacketHeader_PacketId_ROOM_LEAVE_RES;
  static constexpr PacketId ROOM_LEAVE_USER_NTF =
    PacketHeader_PacketId_ROOM_LEAVE_USER_NTF;
  static constexpr PacketId ROOM_CHAT_REQ =
    PacketHeader_PacketId_ROOM_CHAT_REQ;
  static constexpr PacketId ROOM_CHAT_RES =
    PacketHeader_PacketId_ROOM_CHAT_RES;
  static constexpr PacketId ROOM_CHAT_NTF =
    PacketHeader_PacketId_ROOM_CHAT_NTF;
  static constexpr PacketId ROOM_CHANGED_INFO_NTF =
    PacketHeader_PacketId_ROOM_CHANGED_INFO_NTF;
  static constexpr PacketId DEV_ECHO_REQ =
    PacketHeader_PacketId_DEV_ECHO_REQ;
  static constexpr PacketId DEV_ECHO_RES =
    PacketHeader_PacketId_DEV_ECHO_RES;
  static constexpr PacketId MAX =
    PacketHeader_PacketId_MAX;
  static inline bool PacketId_IsValid(int value) {
    return PacketHeader_PacketId_IsValid(value);
  }
  static constexpr PacketId PacketId_MIN =
    PacketHeader_PacketId_PacketId_MIN;
  static constexpr PacketId PacketId_MAX =
    PacketHeader_PacketId_PacketId_MAX;
  static constexpr int PacketId_ARRAYSIZE =
    PacketHeader_PacketId_PacketId_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  PacketId_descriptor() {
    return PacketHeader_PacketId_descriptor();
  }
  template<typename T>
  static inline const std::string& PacketId_Name(T enum_t_value) {
    static_assert(::std::is_same<T, PacketId>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function PacketId_Name.");
    return PacketHeader_PacketId_Name(enum_t_value);
  }
  static inline bool PacketId_Parse(const std::string& name,
      PacketId* value) {
    return PacketHeader_PacketId_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTotalSizeFieldNumber = 1,
    kPacketIdFieldNumber = 2,
  };
  // int32 totalSize = 1;
  void clear_totalsize();
  ::PROTOBUF_NAMESPACE_ID::int32 totalsize() const;
  void set_totalsize(::PROTOBUF_NAMESPACE_ID::int32 value);

  // .lsbProto.PacketHeader.PacketId packetId = 2;
  void clear_packetid();
  ::lsbProto::PacketHeader_PacketId packetid() const;
  void set_packetid(::lsbProto::PacketHeader_PacketId value);

  // @@protoc_insertion_point(class_scope:lsbProto.PacketHeader)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 totalsize_;
  int packetid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PacketHeader_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PacketHeader

// int32 totalSize = 1;
inline void PacketHeader::clear_totalsize() {
  totalsize_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PacketHeader::totalsize() const {
  // @@protoc_insertion_point(field_get:lsbProto.PacketHeader.totalSize)
  return totalsize_;
}
inline void PacketHeader::set_totalsize(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  totalsize_ = value;
  // @@protoc_insertion_point(field_set:lsbProto.PacketHeader.totalSize)
}

// .lsbProto.PacketHeader.PacketId packetId = 2;
inline void PacketHeader::clear_packetid() {
  packetid_ = 0;
}
inline ::lsbProto::PacketHeader_PacketId PacketHeader::packetid() const {
  // @@protoc_insertion_point(field_get:lsbProto.PacketHeader.packetId)
  return static_cast< ::lsbProto::PacketHeader_PacketId >(packetid_);
}
inline void PacketHeader::set_packetid(::lsbProto::PacketHeader_PacketId value) {
  
  packetid_ = value;
  // @@protoc_insertion_point(field_set:lsbProto.PacketHeader.packetId)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace lsbProto

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::lsbProto::PacketHeader_PacketId> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::lsbProto::PacketHeader_PacketId>() {
  return ::lsbProto::PacketHeader_PacketId_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_PacketHeader_2eproto
